@mixin arrow($color) {
  content: " ";
  position: absolute;
  display: block;
  width: 8px;
  height: 8px;
  border: 1px solid $color;
  border-right: 0;
  border-top: 0;
  pointer-events: none;
  transform: rotate(-45deg);
}
// Clearfix
@mixin clearfix() {
  &:before,
  &:after {
    content: " "; // 1
    display: table; // 2
  }
  &:after {
    clear: both;
  }
}

// Center-block
@mixin center-block() {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

// Box-shadow
@mixin box-shadow($shadow) {
  -webkit-box-shadow: $shadow; // iOS <4.3 & Android <4.1
          box-shadow: $shadow;
}

// Box sizing
@mixin box-sizing($boxmodel) {
  -webkit-box-sizing: $boxmodel;
     -moz-box-sizing: $boxmodel;
          box-sizing: $boxmodel;
}

// Text overflow
@mixin text-overflow() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Text-justify
@mixin text-justify(){
  text-align: justify;
  text-justify: inter-ideograph; //IE支持属性
}

// Text hide
@mixin text-hide() {
  font: "0/0" a;
  color: transparent;
  text-shadow: none;
  background-color: transparent;
  border: 0;
}

// Placeholder text
@mixin placeholder($color: $input-color-placeholder) {
  // Firefox
  &::-moz-placeholder {
    color: $color;
    opacity: 1; // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526
  }
  &:-ms-input-placeholder { color: $color; } // Internet Explorer 10+
  &::-webkit-input-placeholder  { color: $color; } // Safari and Chrome
}

@mixin placeholder {
  $placeholders: ':-moz' ':-webkit-input' '-moz' '-ms-input';
  @each $placeholder in $placeholders {
    &:#{$placeholder}-placeholder {
      @content
    }
  }
}

// Forms
@mixin form-control-focus($color: $input-border-focus) {
  &:focus {
    border-color: $color;
    outline: 0;
  }
}

@mixin box-shadow($shadow...) {
  @if $enable-shadows {
    box-shadow: $shadow;
  }
}
// Button variants
//
// Easily pump out default styles, as well as :hover, :focus, :active,
// and disabled options for all buttons

@mixin button-variant($color, $background, $border) {
  $hover-background: darken($background, 5%);
  $hover-border: darken($border, 8%);
  $active-background: darken($background, 10%);
  $active-border: darken($border, 12%);

  color: $color;
  background-color: $background;
  border-color: $border;

  // Hover and focus styles are shared
  @include hover-focus{
    color: $color;
    background-color: $hover-background;
    border-color: $hover-border;
  }

  // Disabled comes first so active can properly restyle
  &.disabled,
  &:disabled {
    background-color: $background;
    border-color: $border;
  }

  &:active,
  &.active {
    color: $color;
    background-color: $active-background;
    background-image: none; // Remove the gradient for the pressed/active state
    border-color: $active-border;
    @include box-shadow($btn-active-box-shadow);
  }
}

// Button sizes
@mixin button-size($padding-y, $padding-x, $font-size, $line-height, $border-radius) {
  padding: $padding-y $padding-x;
  font-size: $font-size;
  line-height: $line-height;
  @include border-radius($border-radius);
}

// Single side border-radius
@mixin border-radius($radius: $border-radius) {
  @if $enable-rounded {
    border-radius: $radius;
  }
}

@mixin border-top-radius($radius) {
  @if $enable-rounded {
    border-top-left-radius: $radius;
    border-top-right-radius: $radius;
  }
}

@mixin border-right-radius($radius) {
  @if $enable-rounded {
    border-top-right-radius: $radius;
    border-bottom-right-radius: $radius;
  }
}

@mixin border-bottom-radius($radius) {
  @if $enable-rounded {
    border-bottom-right-radius: $radius;
    border-bottom-left-radius: $radius;
  }
}

@mixin border-left-radius($radius) {
  @if $enable-rounded {
    border-top-left-radius: $radius;
    border-bottom-left-radius: $radius;
  }
}

@mixin hover {
  &:hover { @content }
}
@mixin hover-focus {
  @if $enable-hover-media-query {
    &:focus { @content }
    @include hover { @content }
  } @else {
    &:focus,
    &:hover {
      @content
    }
  }
}

@mixin transition($transition...) {
  @if $enable-transitions {
    @if length($transition) == 0 {
      transition: $transition-base;
    } @else {
      transition: $transition;
    }
  }
}

// Applies the given styles only when the browser support CSS3 3D transforms.
@mixin if-supports-3d-transforms() {
  @media (-webkit-transform-3d) {
    // Old Safari, Old Android
    // http://caniuse.com/#feat=css-featurequeries
    // https://developer.mozilla.org/en-US/docs/Web/CSS/@media/-webkit-transform-3d
    @content;
  }

  @supports (transform: translate3d(0,0,0)) {
    // The Proper Way: Using a CSS feature query
    @content;
  }
}

// Responsiveness

@mixin from($device) {
  @media screen and (min-width: $device) {
    @content
  }
}

@mixin until($device) {
  @media screen and (max-width: $device - 1px) {
    @content
  }
}

@mixin mobile {
  @media screen and (max-width: $tablet - 1px) {
    @content
  }
}

@mixin tablet {
  @media screen and (min-width: $tablet), print {
    @content
  }
}

@mixin tablet-only {
  @media screen and (min-width: $tablet) and (max-width: $desktop - 1px) {
    @content
  }
}

@mixin touch {
  @media screen and (max-width: $desktop - 1px) {
    @content
  }
}

@mixin desktop {
  @media screen and (min-width: $desktop) {
    @content
  }
}

@mixin desktop-only {
  @media screen and (min-width: $desktop) and (max-width: $widescreen - 1px) {
    @content
  }
}

@mixin widescreen {
  @media screen and (min-width: $widescreen) {
    @content
  }
}

@mixin widescreen-only {
  @media screen and (min-width: $widescreen) and (max-width: $fullhd - 1px) {
    @content
  }
}

@mixin fullhd {
  @media screen and (min-width: $fullhd) {
    @content
  }
}
//wrapper
@mixin wrapper(){
  width: 1200px;
  margin: 0 auto;
}

@mixin control {
  -moz-appearance: none;
  -webkit-appearance: none;
  align-items: center;
  border: 1px solid transparent;
  border-radius: $control-radius;
  box-shadow: none;
  display: inline-flex;
  font-size: $font-size-base;
  height: 36px;
  justify-content: flex-start;
  line-height: 1.5;
  padding-bottom: $control-padding-vertical;
  padding-left: $control-padding-horizontal;
  padding-right: $control-padding-horizontal;
  padding-top: $control-padding-vertical;
  position: relative;
  vertical-align: top;
  // States
  &:focus,
  &.is-focused,
  &:active,
  &.is-active {
    outline: none;
  }
  &[disabled] {
    cursor: not-allowed;
  }
}