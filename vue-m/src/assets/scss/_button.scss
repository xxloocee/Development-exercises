// scss-lint:disable QualifyingElement

//
// Base styles
//

.btn {
  display: inline-block;
  font-weight: $btn-font-weight;
  text-align: center;
  white-space: nowrap;
  vertical-align: middle;
  user-select: none;
  box-shadow: $btn-box-shadow;
  border: 1px solid transparent;
  @include button-size($input-btn-padding-y, $input-btn-padding-x, $font-size-base, $input-btn-line-height, $border-radius);
  @include transition($btn-transition);
  @include hover-focus {
    text-decoration: none;
    color: $gray-dark;
    background-color: $btn-focus-bg;
  }
  color: $gray-base;
  background-color: $btn-default-bg;
  cursor: pointer;
  &:focus,
  &.focus {
    outline: 0;
    color: $gray-dark;
    background-color: $btn-focus-bg;
    // box-shadow: $btn-focus-box-shadow;
  }

  // Disabled comes first so active can properly restyle
  &.disabled,
  &:disabled {
    opacity: .65;
    @include box-shadow(none);
  }

  &:active,
  &.active {
    color: $gray-dark;
    background-color: $btn-active-bg;
  }
}

// Future-proof disabling of clicks on `<a>` elements
a.btn.disabled,
fieldset[disabled] a.btn {
  pointer-events: none;
}


//
// Alternate buttons
//
.basic{
  @include button-variant($btn-default-color, transparent, $btn-basic-border-color);
  &.inverted {
    @include button-variant($btn-inverted-color, $btn-inverted-bg, $btn-inverted-border-color);
  }
}
.brand {
  @include button-variant($btn-brand-color, $btn-brand-bg, $btn-brand-border-color);
  @include hover-focus {
    color: $btn-brand-color;
    background-color: darken($btn-brand-bg, 5%);
  }
}

//
// Button Sizes
//

.btn-lg {
  @include button-size($input-btn-padding-y-lg, $input-btn-padding-x-lg, $font-size-lg, $line-height-lg, $btn-border-radius-lg);
}

.btn-sm {
  @include button-size($input-btn-padding-y-sm, $input-btn-padding-x-sm, $font-size-sm, $line-height-sm, $btn-border-radius-sm);
}


//
// Block button
//

.btn-block {
  display: block;
  width: 100%;
}

// Vertically space out multiple block buttons
.btn-block + .btn-block {
  margin-top: $btn-block-spacing-y;
}

// Specificity overrides
input[type="submit"],
input[type="reset"],
input[type="button"] {
  &.btn-block {
    width: 100%;
  }
}


.btn-group {
  position: relative;
  display: inline-flex;
  vertical-align: middle; // match .btn alignment given font-size hack above

  > .btn {
    position: relative;
    flex: 0 1 auto;
    margin-bottom: 0;
    &.brand{
      @include button-variant($brand, transparent, $btn-brand-border-color);
      @include hover-focus{
        color: $btn-brand-color;
        background-color: $btn-brand-bg;
        border-color: $btn-brand-border-color;
      }
    }

    // Bring the hover, focused, and "active" buttons to the fron to overlay
    // the borders properly
    @include hover {
      z-index: 2;
    }
    &:focus,
    &:active,
    &.active {
      z-index: 2;
    }
  }

  // Prevent double borders when buttons are next to each other
  .btn + .btn,
  .btn + .btn-group,
  .btn-group + .btn,
  .btn-group + .btn-group {
    margin-left: -$input-btn-border-width;
  }

}

.btn-group > .btn:not(:first-child):not(:last-child) {
  border-radius: 0;
}

.btn-group > .btn:first-child {
  margin-left: 0;

  &:not(:last-child):not(.dropdown-toggle) {
    @include border-right-radius(0);
  }
}
// Need .dropdown-toggle since :last-child doesn't apply given a .dropdown-menu immediately after it
.btn-group > .btn:last-child:not(:first-child) {
  @include border-left-radius(0);
}
